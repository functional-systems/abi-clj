(ns abi-clj.encode-test
  (:require [abi-clj.encode :as sut]
            [clojure.test :as t]))

(t/deftest param
  (t/testing "Static"

    (t/testing "Should encode a uint"
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000010f2c"
               (sut/param {:type "uint256" :value 69420N})))
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000010f2c"
               (sut/param {:type "uint32" :value 69420})))
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000000020"
               (sut/param {:type "uint8" :value 32}))))

    (t/testing "Should encode an int"
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000010f2c"
               (sut/param {:type "int256" :value 69420N})))
      (t/is (= "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef0d4"
               (sut/param {:type "int256" :value -69420N})))
      (t/is (= "0x000000000000000000000000000000000000000000000000000000000000007f"
               (sut/param {:type "int8" :value 127})))
      (t/is (= "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80"
               (sut/param {:type "int8" :value -128})))
      (t/is (= "0x000000000000000000000000000000000000000000000000000000007fffffff"
               (sut/param {:type "int32" :value 2147483647})))
      (t/is (= "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000"
               (sut/param {:type "int32" :value -2147483648}))))

    (t/testing "Should encode an address"
      (t/is (= "0x00000000000000000000000014dc79964da2c08b23698b3d3cc7ca32193d9955"
               (sut/param {:type "address" :value "0x14dC79964da2C08b23698B3D3cc7Ca32193d9955"}))))

    (t/testing "Should encode a bool"
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000000001"
               (sut/param {:type "bool" :value true})))
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000000000"
               (sut/param {:type "bool" :value false}))))

    (t/testing "Should encode bytes"
      (t/is (= "0x0123456789abcdef000000000000000000000000000000000000000000000000"
               (sut/param {:type "bytes8" :value "0x0123456789abcdef"})))

      (t/is (= "0x4206942069420102321010123141512200000000000000000000000000000000"
               (sut/param {:type "bytes16" :value "0x42069420694201023210101231415122"})))))

  (t/testing "Vectors"
    (t/testing "Should encode a uint[3]"
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000010f2c000000000000000000000000000000000000000000000000000000000000a45500000000000000000000000000000000000000000000000000000000190f1b44"
               (sut/param {:type "uint256[3]" :value [69420N 42069N 420420420N]}))))

    (t/testing "Should encode a int[3]"
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000010f2cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5bab00000000000000000000000000000000000000000000000000000000190f1b44"
               (sut/param {:type "int256[3]" :value [69420N -42069N 420420420N]}))))

    (t/testing "Should encode a address[2]"
      (t/is (= "0x000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac"
               (sut/param {:type "address[2]" :value ["0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b"

                                                      "0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC"]}))))

    (t/testing "Should encode a bool[2]"
      (t/is (= "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
               (sut/param {:type "bool[2]" :value [true false]}))))

    (t/testing "Should encode bytes[2]"
      (t/is (= "0x12111211121112110000000000000000000000000000000000000000000000001111111111111111000000000000000000000000000000000000000000000000"
               (sut/param {:type "bytes8[2]" :value ["0x1211121112111211" "0x1111111111111111"]}))))

    (t/testing "Should encode a uint[3][2]"
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000010f2c000000000000000000000000000000000000000000000000000000000000a45500000000000000000000000000000000000000000000000000000000190f1b4400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000001a6"
               (sut/param {:type "uint256[3][2]" :value [[69420N 42069N 420420420N]
                                                         [420N, 44N, 422N]]}))))

    (t/testing "Should encode a uint[3][2][4]"
      (t/is (= "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f
               (sut/param {:type "uint256[3][2][4]" :value [[[1N, 2N, 3N],
                                                             [4N, 5N, 6N]],
                                                            [[7N, 8N, 9N],
                                                             [10N, 11N, 12N]],
                                                            [[13N, 14N, 15N],
                                                             [16N, 17N, 18N]],
                                                            [[19N, 20N, 21N],
                                                             [22N, 23N, 24N]]]})))))

  (t/testing "Struct"
    (t/testing "Should encode a struct: (uint256,bool,address)"
      (t/is (= "0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac"
               (sut/param {:type "tuple"
                           :components [{:type "uint256"}
                                        {:type "bool"}
                                        {:type "address"}]
                           :value [420N true "0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC"]}))))

    (t/testing "Should encode a struct: ((uint256,bool,address),(uint256,bool,address),uint8[2])"
      (t/is (= "0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
               (sut/param {:type "tuple"
                           :components [{:components [{:name "x"
                                                       :type "uint256"}
                                                      {:name "y"
                                                       :type "bool"}
                                                      {:name "z"
                                                       :type "address"}]

                                         :name "foo"
                                         :type "tuple"}
                                        {:components [{:name "x"
                                                       :type "uint256"}
                                                      {:name "y"
                                                       :type "bool"}
                                                      {:name "z"
                                                       :type "address"}]
                                         :name "baz"
                                         :type "tuple"}
                                        {:name "x"
                                         :type "uint8[2]"}]

                           :value {:foo {:x 420N
                                         :y true
                                         :z "0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC"}
                                   :baz {:x 69N
                                         :y false
                                         :z "0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b"}
                                   :x [1 2]}})))))

  (t/testing "Dynamic"
    (t/testing "Should encode a uint256[]"
      (t/is (= "0x000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000037"
               (sut/param {:type "uint256[]" :value [420N 69N 22N 55N]}))))

    (t/testing "Should encode a string < 32 bytes"
      (t/is (= "0x00000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000"
               (sut/param {:type "string" :value "wagmi"}))))

    (t/testing "Should encode a string > 32 bytes"
      (t/is (= "0x00000000000000000000000000000000000000000000000000000000000002da4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742e204e756e63206661756369627573206c6f72656d2061206c696265726f20617563746f7220636f6e64696d656e74756d2e20446f6e6563206f726e617265206d617373612072686f6e637573206c616375732072757472756d2c20656765742070756c76696e6172206172637520656c656d656e74756d2e204e756e63206d6175726973206c6f72656d2c20736f64616c65732065676574207669766572726120696e2c20657569736d6f642071756973206d692e205072616573656e74206e656320636f6d6d6f646f206c656f2e2050686173656c6c757320636f6e64696d656e74756d206d61757269732073656420616363756d73616e20656c656966656e642e205072616573656e7420616320626c616e6469742073656d2c2065742072757472756d20697073756d2e20457469616d20696e2074656c6c757320616320656e696d20666163696c6973697320756c7472696365732e20467573636520616320766573746962756c756d207175616d2e204475697320736564207075727573207363656c657269737175652c20736f6c6c696369747564696e20657261742061632c2070756c76696e6172206e6973692e2050656c6c656e746573717565206575207075727573206e65632073617069656e207665686963756c6120636f6e76616c6c69732075742076656c20656c69742e2053757370656e6469737365206567657420657820766974616520656e696d20766f6c7574706174207363656c657269737175652e20536564207175697320656c6974207472697374697175652065726174206c756374757320656765737461732061206163206f64696f2e2044756973207665686963756c6120656e696d206163206d6574757320677261766964612c2076656c206d6178696d7573206e69736920696d706572646965742e000000000000"
               (sut/param {:type "string" :value "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc faucibus lorem a libero auctor condimentum. Donec ornare massa rhoncus lacus rutrum, eget pulvinar arcu elementum. Nunc mauris lorem, sodales eget viverra in, euismod quis mi. Praesent nec commodo leo. Phasellus condimentum mauris sed accumsan eleifend. Praesent ac blandit sem, et rutrum ipsum. Etiam in tellus ac enim facilisis ultrices. Fusce ac vestibulum quam. Duis sed purus scelerisque, sollicitudin erat ac, pulvinar nisi. Pellentesque eu purus nec sapien vehicula convallis ut vel elit. Suspendisse eget ex vitae enim volutpat scelerisque. Sed quis elit tristique erat luctus egestas a ac odio. Duis vehicula enim ac metus gravida, vel maximus nisi imperdiet."}))))

    (t/testing "Should encode bytes < 32"
      (t/is (= "0x00000000000000000000000000000000000000000000000000000000000000030420690000000000000000000000000000000000000000000000000000000000"
               (sut/param {:type "bytes" :value "0x042069"}))))

    (t/testing "Should encode bytes > 32"
      (t/is (= "0x000000000000000000000000000000000000000000000000000000000000002470a08231000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa9604500000000000000000000000000000000000000000000000000000000"
               (sut/param {:type "bytes" :value "0x70a08231000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045"}))))

    (t/testing "Should encode a tuple"
      (t/is (= "0x000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000"
               (sut/param {:type "tuple"
                           :components [{:type "uint256"
                                         :name "nft"}
                                        {:type "string"
                                         :name "foo"}]
                           :value {:foo "wagmi"
                                   :nft 10}}))))
    (t/testing "Should encode a tuple"
      (t/is (= "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000"
               (sut/param {:type "tuple[]"
                           :components [{:type "uint256"
                                         :name "nft"}
                                        {:type "string"
                                         :name "foo"}]
                           :value [{:foo "wagmi"
                                    :nft 10}]}))))))
