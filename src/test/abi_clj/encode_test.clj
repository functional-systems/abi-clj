(ns abi-clj.encode-test
  (:require [abi-clj.encode :as sut]
            [clojure.test :as t]))

(t/deftest param
  (t/testing "Static"

    (t/testing "Should encode a uint"
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000010f2c"
                :size 32
                :len 0}
               (sut/param {:type "uint256" :value 69420N})))
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000010f2c"
                :size 32
                :len 0}
               (sut/param {:type "uint32" :value 69420})))
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000000020"
                :size 32
                :len 0}
               (sut/param {:type "uint8" :value 32}))))

    (t/testing "Should encode an int"
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000010f2c"
                :size 32
                :len 0}
               (sut/param {:type "int256" :value 69420N})))
      (t/is (= {:data "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef0d4"
                :size 32
                :len 0}
               (sut/param {:type "int256" :value -69420N})))
      (t/is (= {:data "0x000000000000000000000000000000000000000000000000000000000000007f"
                :size 32
                :len 0}
               (sut/param {:type "int8" :value 127})))
      (t/is (= {:data "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80"
                :size 32
                :len 0}
               (sut/param {:type "int8" :value -128})))
      (t/is (= {:data "0x000000000000000000000000000000000000000000000000000000007fffffff"
                :size 32
                :len 0}
               (sut/param {:type "int32" :value 2147483647})))
      (t/is (= {:data "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000"
                :size 32
                :len 0}
               (sut/param {:type "int32" :value -2147483648}))))

    (t/testing "Should encode an address"
      (t/is (= {:data "0x00000000000000000000000014dc79964da2c08b23698b3d3cc7ca32193d9955"
                :size 32
                :len 0}
               (sut/param {:type "address" :value "0x14dC79964da2C08b23698B3D3cc7Ca32193d9955"}))))

    (t/testing "Should encode a bool"
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000000001"
                :size 32
                :len 0}
               (sut/param {:type "bool" :value true})))
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000000000"
                :size 32
                :len 0}
               (sut/param {:type "bool" :value false}))))

    (t/testing "Should encode bytes"
      (t/is (= {:data "0x0123456789abcdef000000000000000000000000000000000000000000000000"
                :size 32
                :len 0}
               (sut/param {:type "bytes8" :value "0x0123456789abcdef"})))

      (t/is (= {:data "0x4206942069420102321010123141512200000000000000000000000000000000"
                :size 32
                :len 0}
               (sut/param {:type "bytes16" :value "0x42069420694201023210101231415122"})))))

  (t/testing "Vectors"
    (t/testing "Should encode a uint[3]"
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000010f2c000000000000000000000000000000000000000000000000000000000000a45500000000000000000000000000000000000000000000000000000000190f1b44"
                :size  96
                :len 0}
               (sut/param {:type "uint256[3]" :value [69420N 42069N 420420420N]}))))

    (t/testing "Should encode a int[3]"
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000010f2cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5bab00000000000000000000000000000000000000000000000000000000190f1b44"
                :size 96
                :len 0}
               (sut/param {:type "int256[3]" :value [69420N -42069N 420420420N]}))))

    (t/testing "Should encode a address[2]"
      (t/is (= {:data "0x000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac"
                :size 64
                :len 0}
               (sut/param {:type "address[2]" :value ["0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b"

                                                      "0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC"]}))))

    (t/testing "Should encode a bool[2]"
      (t/is (= {:data "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
                :size 64
                :len 0}
               (sut/param {:type "bool[2]" :value [true false]}))))

    (t/testing "Should encode bytes[2]"
      (t/is (= {:data "0x12111211121112110000000000000000000000000000000000000000000000001111111111111111000000000000000000000000000000000000000000000000"
                :size 64
                :len 0}
               (sut/param {:type "bytes8[2]" :value ["0x1211121112111211" "0x1111111111111111"]}))))

    (t/testing "Should encode a uint[3][2]"
      (t/is (= {:data "0x0000000000000000000000000000000000000000000000000000000000010f2c000000000000000000000000000000000000000000000000000000000000a45500000000000000000000000000000000000000000000000000000000190f1b4400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000001a6"
                :size 192
                :len 0}
               (sut/param {:type "uint256[3][2]" :value [[69420N 42069N 420420420N]
                                                         [420N, 44N, 422N]]}))))

    (t/testing "Should encode a uint[3][2][4]"
      (t/is (= {:data "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f
                :size 768
                :len 0}
               (sut/param {:type "uint256[3][2][4]" :value [[[1N, 2N, 3N],
                                                             [4N, 5N, 6N]],
                                                            [[7N, 8N, 9N],
                                                             [10N, 11N, 12N]],
                                                            [[13N, 14N, 15N],
                                                             [16N, 17N, 18N]],
                                                            [[19N, 20N, 21N],
                                                             [22N, 23N, 24N]]]})))))

  (t/testing "Struct"
    (t/testing "Should encode a struct: (uint256,bool,address)"
      (t/is (= {:data "0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac"
                :size 96
                :len 0}
               (sut/param {:type "tuple"
                           :components [{:type "uint256"}
                                        {:type "bool"}
                                        {:type "address"}]
                           :value [420N true "0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC"]}))))

    (t/testing "Should encode a struct: ((uint256,bool,address),(uint256,bool,address),uint8[2])"
      (t/is (= {:data "0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c961145a54c96e3ae9baa048c4f4d6b04c13916b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
                :size 256
                :len 0}
               (sut/param {:type "tuple"
                           :components [{:components [{:name "x"
                                                       :type "uint256"}
                                                      {:name "y"
                                                       :type "bool"}
                                                      {:name "z"
                                                       :type "address"}]

                                         :name "foo"
                                         :type "tuple"}
                                        {:components [{:name "x"
                                                       :type "uint256"}
                                                      {:name "y"
                                                       :type "bool"}
                                                      {:name "z"
                                                       :type "address"}]
                                         :name "baz"
                                         :type "tuple"}
                                        {:name "x"
                                         :type "uint8[2]"}]

                           :value {:foo {:x 420N
                                         :y true
                                         :z "0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC"}
                                   :baz {:x 69N
                                         :y false
                                         :z "0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b"}
                                   :x [1 2]}})))))

  (t/testing "Dynamic"
    (t/testing "Should encode dynamic uint vector"
      (t/is (= {:data "0x00000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000037"
                :size 128
                :len 4}
               (sut/param {:type "uint256[]" :value [420N 69N 22N 55N]}))))
    (t/testing "Should unwrap a dynamic uint"
      (t/is (= "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000037"
               (sut/unwrap-params [(sut/param {:type "uint256[]" :value [420N 69N 22N 55N]})]))))

    (t/testing "Should encode string"
      (t/is (= {:data "0x7761676d69000000000000000000000000000000000000000000000000000000"
                :size 32
                :len 5}
               (sut/param {:type "string" :value "wagmi"}))))))
